_______________________                                     __________________________
   Character Arrays                                                   Strings
_______________________                                     __________________________
- Need to know size beforehand                            - No need to know size beforehand
- Larger size required for operations                     - Performing operations like concatenation
   ( concatenate or append)                                  & append is easier
- No terminating extra character.                         - Terminated with a special character '\0'

____________________________________________________________________________________________________________________
                      Different types of ways to declare a string/ Different functions in strings
____________________________________________________________________________________________________________________
1)  string str;
    cin>>str;
    cout<<str;
 
2)  string str1(5,'n');
    cout<<str1;          // nnnnn

3)  string str = "ApniKaksha";
    cout<<str;           // ApniKaksha

4)  string str;
    getline(cin, str);  // This function is used to store a stream of characters as entered by the user in the object memory.
    cout<< str ;        // Rishabh is a peaceful soul
    
5)   string s1="fam";
     string s2="ily";
     s1.append(s2);
     cout<<s1;         // family
     
     cout<< s1+s2;     // family
     
     s1=s1+s2;
     cout<< s1;        // family
     
10)  cout<< s1[1];      // a

11)  string str="anuj";
     str.clear();
     cout<<str;        //
  
12)  string s1= "abc";
     string s2= " xyz";
     cout<< s2.compare(s1);  
     //  if s1>s2  => positive
     //  if s1== s2  => zero
     //  if s1<s2    => negative
     
13)  string str="abc";
      str.empty();   // check wheather string is empty
   
14)  string s1="nincompoop";
     s1.erase(3,2);    // ninmpoop
    
15)   string s1="nincompoop";
      cout<<s1.find("com");     // 3
      cout<<s1.find("poo");     // 6
 
16)  string s1="nincompoop";
     s1.insert(2,"lol");
     cout<<s1;                // nilolncompoop
     
17)   string s1="nincompoop"; 
      cout<<s1.size();        // 10
      cout<<s1.length();      // 10
      
18)   string s1="nincompoop";
      string s=s.substr(6,4);
      cout<<s1;               //poop
      
19)   string s1 = "786";
      int x = stoi(s1);
      cout<< x+2;     // 788
      
20)   int x = 786;
      cout<<to_string(x)+2;      // 7862
      
21)   string s1 = "xcmnmvzcxmfas";
      sort(s1.begin(),s1.end());
      cout<< s1;                  // accfmmmnsvxyz
      
22)   push_back() :- This function is used to input a character at the end of the string.

23)   pop_back() :- This function is used to delete the last character from the string.

24)   capacity() :- This function returns the capacity allocated to the string, which can be equal to or more than the size of the string. Additional space is allocated so 
                    that when the new characters are added to the string, the operations can be done efficiently.
                    i.e., str.capacity(); 

25)   resize() :- This function changes the size of string, the size can be increased or decreased.
                  i.e.,  str.resize(13); 
                  
26)   shrink_to_fit() :- This function decreases the capacity of the string and makes it equal to the minimum capacity of the string. This operation is useful to save
                         additional memory if we are sure that no further addition of characters have to be made.
      i.e., str.shrink_to_fit();
      
_______________________________________________________________________________________
                                 Iterator Functions
_______________________________________________________________________________________

1) begin() : This function returns an iterator to beginning of the string.

2) end() :- This function returns an iterator to end of the string.

3) rbegin() :- This function returns a reverse iterator pointing at the end of string.

4) rend() :- This function returns a reverse iterator pointing at beginning of string.
             i.e.,
                     string str="Hello world";
                     string::reverse_iterator it;
                     for(it=str.rbegin(); it!=str.rend(); it++)
                     cout<<*it;
                     
                     string::iterator it;
                     for(it=str.begin(); it!=str.end(); it++)
                     cout<<*it;
                     
______________________________________________________________________________
                           Manipulating Functions
______________________________________________________________________________

1) copy("char array",len,pos) :- This function copies the substring in target character array mentioned in its arguments. It takes 3 arguments, target char array,
                                 length to be copied and starting position in string to start copying.
                                 i.e.,
                                      char ch[80];
                                      str1.copy(ch,13,0); 
2) swap() :- This function swaps one string with other.
             i.e., 
                  str1.swap(str2); 

_______________________________________________________________________________
                  Function Templates used in regex
_______________________________________________________________________________
1) regex_match() :- This function return true if the regular expression is a match against the given string otherwise it returns false.

2) regex_search() :- This function is used to search for a pattern matching the regular expression.

3) regex_replace() :- This function is used to replace the pattern matching to the regular expression with a string.


_____________________________________________________________________________________
                      stringstream in C++ and its applications
_____________________________________________________________________________________

A stringstream associates a string object with a stream allowing you to read from the string as if it were a stream (like cin)

Basic methods are-
   clear() -  to clear the stream
   str() — to get and set string object whose content is present in stream.
   operator << — add a string to the stringstream object.
   operator >> — read something from the stringstream object, 

stringstream class is extremely useful in parsing input. 

---------------------
  Some Applications
---------------------
1) Count number of words in a string
2) Print frequencies of individual words in a string
3) Removing spaces from a string using StringStream
4) Converting Strings to Numbers in C/C++






               
